<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
        default-autowire="default">

    <context:component-scan base-package="beholder" />

    <bean id="storesConfig" class="beholder.conf.Config">
        <property name="storeConfigs">
            <map>
                <entry key="rozetka">
                    <bean class="beholder.stores.rozetka.RozetkaProcessor"></bean>
                </entry>
                <!--<entry key="fotos">-->
                <!--<bean class="beholder.stores.fotos.FotosProcessor"></bean>-->
                <!--</entry>-->
                <entry key="deshevle">
                    <bean class="beholder.stores.deshevle.DeshevleProcessor"></bean>
                </entry>
                <entry key="foxtrot">
                    <bean class="beholder.stores.foxtrot.FoxtrotProcessor"></bean>
                </entry>
                <entry key="tehnos">
                    <bean class="beholder.stores.tehnos.TehnosProcessor"></bean>
                </entry>
                <entry key="mobilluck">
                    <bean class="beholder.stores.mobilluck.MobilluckProcessor"></bean>
                </entry>
                <entry key="vstroyka">
                    <bean class="beholder.stores.vstroyka.VstroykaProcessor"></bean>
                </entry>
                <entry key="palladium">
                    <bean class="beholder.stores.palladium.PalladiumProcessor"></bean>
                </entry>
                <entry key="tehnohata">
                    <bean class="beholder.stores.tehnohata.TehnohataProcessor"></bean>
                </entry>
                <entry key="v590">
                    <bean class="beholder.stores.v590.V590Processor"></bean>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="storeProcessorFactory" class="beholder.app.proc.StoreProcessorFactory">
        <lookup-method name="getStoreProcessor" bean="storeProcessor"/>
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="localhost"/>
    </bean>

    <!-- this is a template message that we can pre-load with default state -->
    <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="customerservice@mycompany.com"/>
        <property name="subject" value="Your order"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!-- JDBC connection pool (use the built-in) -->
                <prop key="hibernate.connection.pool_size">10</prop>

                <!-- SQL dialect -->
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL9Dialect</prop>

                <!-- Enable Hibernate's automatic session context management -->
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->
                <!--<prop key="hibernate.transaction.auto_close_session">false</prop>-->

                <prop key="hibernate.jdbc.batch_size">100</prop>

                <!-- Disable the second-level cache  -->
                <!--<prop key="cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</prop>-->

                <!-- Echo all executed SQL to stdout -->
                <prop key="hibernate.show_sql">false</prop>

                <!--<prop key="hibernate.c3p0.acquire_increment">1</prop>-->
                <!--<prop key="hibernate.c3p0.idle_test_period">100</prop>-->
                <!--&lt;!&ndash; seconds &ndash;&gt;-->
                <!--<prop key="hibernate.c3p0.max_size">100</prop>-->
                <!--<prop key="hibernate.c3p0.max_statements">0</prop>-->
                <!--<prop key="hibernate.c3p0.min_size">10</prop>-->
                <!--<prop key="hibernate.c3p0.timeout">100</prop>-->
            </props>
        </property>
        <!--<property name="jtaTransactionManager" ref="transactionManager"/>-->

        <!--<property name="hibernate.hbm2ddl.auto">create</property>-->

        <property name="packagesToScan">
            <array>
                <value>beholder.domain</value>
                <!--<value>beholder.persistence</value>-->
            </array>
        </property>
    </bean>

    <!-- The transaction manager -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <property name="url" value="jdbc:postgresql://localhost:5432/eye"/>
        <property name="username" value="postgres"/>
        <property name="password" value="postgrespass"/>
    </bean>

</beans>